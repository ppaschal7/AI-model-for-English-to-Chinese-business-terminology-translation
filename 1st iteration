# Install necessary libraries
!pip install transformers datasets torch

from transformers import MarianTokenizer, MarianMTModel, Trainer, TrainingArguments
from datasets import load_dataset, Dataset

# Load pre-trained model and tokenizer
model_name = "Helsinki-NLP/opus-mt-en-zh"
tokenizer = MarianTokenizer.from_pretrained(model_name)
model = MarianMTModel.from_pretrained(model_name)

# Load your dataset (assuming you have a CSV with 'english' and 'chinese' columns)
dataset = load_dataset('csv', data_files={'train': 'business_terms_train.csv', 'test': 'business_terms_test.csv'})

# Tokenize the dataset
def preprocess_function(examples):
    return tokenizer(examples['english'], truncation=True, padding='max_length', max_length=128)

tokenized_datasets = dataset.map(preprocess_function, batched=True)

# Prepare the dataset for training
train_dataset = tokenized_datasets['train'].shuffle(seed=42).select(range(1000))  # Adjust the range as needed
eval_dataset = tokenized_datasets['test'].shuffle(seed=42).select(range(100))  # Adjust the range as needed

# Define training arguments
training_args = TrainingArguments(
    output_dir='./results',
    evaluation_strategy="epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=16,
    per_device_eval_batch_size=16,
    num_train_epochs=3,
    weight_decay=0.01,
    save_total_limit=2,
)

# Define the Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=eval_dataset,
)

# Fine-tune the model
trainer.train()

# Save the model
model.save_pretrained('./fine-tuned-model')
tokenizer.save_pretrained('./fine-tuned-model')

# Example usage of the fine-tuned model
def translate(text):
    inputs = tokenizer(text, return_tensors="pt", max_length=128, truncation=True, padding=True)
    translated = model.generate(**inputs)
    return tokenizer.decode(translated[0], skip_special_tokens=True)

# Test the model
print(translate("invoice"))
print(translate("supply chain"))
print(translate("customer relationship management"))
